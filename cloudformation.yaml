# vim: et sw=2 ts=2

Resources:
  CustomLambdaRole:
    Type: AWS::IAM::Role
    Properties:                                                                 
      AssumeRolePolicyDocument:                                                 
        Version: "2012-10-17"                                                   
        Statement:                                                              
          -                                                                     
            Effect: Allow                                                       
            Principal:                                                          
              Service:                                                          
                - "lambda.amazonaws.com"                                        
            Action: "sts:AssumeRole"                                            
      Policies:                  
        -
          PolicyName: !Sub "${AWS::StackName}CustomLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action: 
                  - "*"
                Resource: "*"

  CustomLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:     
      FunctionName: !Ref CustomLambdaFunction
      FunctionVersion: '$LATEST'
      Name: CustomLambdaAlias

  CustomLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          const aws = require('aws-sdk')
          const https = require("https")
          const url = require("url")
          const report = function(status,event,context,data) {
            const parsedUrl = url.parse(event.ResponseURL)
            const result = JSON.stringify({ 
                Status: status, 
                RequestId: event.RequestId,
                StackId: event.StackId,
                LogicalResourceId: event.LogicalResourceId,
                Data: data
              }))
            var request = https.request({
                hostname: parsedUrl.hostname,
                port: 443,
                path: parsedUrl.path,
                method: "PUT",
                headers: {
                    "content-type": "",
                    "content-length": result.length
                }
              }, function(response) {
                if (event.ResourceProperties.Debug) console.log(JSON.stringify(response))
                context.done()
              })
            request.on('error', function(error) {
              console.log(JSON.stringify(error))
              context.done()
            })
            request.write(result)
            request.end()
          }
          exports.handler = function(event,context) {
            if ( event.RequestType in event.ResourceProperties) {
              try {
                const res = eval( '(' + event.ResourceProperties[event.RequestType] + ')' )
                report('SUCCESS',event,context,res)
              } catch (e) {
                report('FAILED',event,context,e)
              }
            }
          }
      Role: !GetAtt CustomLambdaRole.Arn                                      
      MemorySize: 512
      Handler: index.handler                                                    
      Runtime: nodejs6.10                                                       
      Timeout: 30
